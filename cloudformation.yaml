AWSTemplateFormatVersion: '2010-09-09'
Description: 'Hackathon Hunter - Final Patched: A complete, deployable infrastructure stack including VPC, databases, and compute for both Scout and Nudge agents.'

Parameters:
  KnowledgeBaseId:
    Type: String
    Description: The ID of the manually created Bedrock Knowledge Base.
  # OpenSearchCollectionArn:
  #   Type: String
  #   Description: The ARN of the manually created OpenSearch Serverless Collection.
  # OpenSearchCollectionEndpoint:
  #   Type: String
  #   Description: The endpoint of the manually created OpenSearch Serverless Collection (e.g., xyz.us-east-1.aoss.amazonaws.com).

Resources:
  # --- 1. NETWORKING (FOR ECS FARGATE) ---
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-VPC'

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-IGW'

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetA'

  PublicSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicSubnetB'

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PublicRouteTable'

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetB
      RouteTableId: !Ref PublicRouteTable

  ScoutAgentSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub '${AWS::StackName}-ScoutAgentSG'
      GroupDescription: 'Allow outbound traffic for Scout Agent'
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
          Description: 'Allow outbound HTTP for web scraping'
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
          Description: 'Allow outbound HTTPS for AWS APIs and web scraping'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ScoutSG'

  # --- 2. DATABASES, STORAGE, & QUEUE ---
  ScoutResponseQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub '${AWS::StackName}-ScoutResponseQueue'
      VisibilityTimeout: 90

  HackathonsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-Hackathons'
      AttributeDefinitions:
        - AttributeName: hackathon_id
          AttributeType: S
      KeySchema:
        - AttributeName: hackathon_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain

  ScraperFunctionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-ScraperFunctions'
      AttributeDefinitions:
        - AttributeName: source_url
          AttributeType: S
      KeySchema:
        - AttributeName: source_url
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain

  UserInterestsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-UserInterests-v3'
      AttributeDefinitions:
        - AttributeName: "user_id"  # Partition Key
          AttributeType: "S"
        - AttributeName: "hackathon_id" # Sort Key
          AttributeType: "S"
      KeySchema:
        - AttributeName: "user_id"
          KeyType: "HASH"
        - AttributeName: "hackathon_id"
          KeyType: "RANGE"
      BillingMode: PAY_PER_REQUEST
    DeletionPolicy: Retain

  ProcessedMessagesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub '${AWS::StackName}-ProcessedMessages'
      AttributeDefinitions:
        - AttributeName: message_id # Use Telegram's unique message ID
          AttributeType: S
      KeySchema:
        - AttributeName: message_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl_timestamp # Attribute to store the expiration time
        Enabled: true
    DeletionPolicy: Delete

  ChatHistoryTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: ChatHistory
      AttributeDefinitions:
        - AttributeName: "chat_id"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "chat_id"
          KeyType: "HASH"
      BillingMode: PAY_PER_REQUEST

  KnowledgeBaseBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'hackathon-kb-${AWS::AccountId}-${AWS::Region}'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    DeletionPolicy: Retain

  EncryptionSecurityPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: hh-enc-policy
      Type: encryption
      Policy: |
        {
          "Rules": [
            {
              "ResourceType": "collection",
              "Resource": ["collection/hackathon-hunter"]
            }
          ],
          "AWSOwnedKey": true
        }

  NetworkSecurityPolicy:
    Type: AWS::OpenSearchServerless::SecurityPolicy
    Properties:
      Name: hh-net-policy-3
      Type: network
      Policy: |
          [
          {
            "Rules": [
              {
                "ResourceType": "collection",
                "Resource": ["collection/hackathon-hunter"]
              },
              {
                "ResourceType": "dashboard",
                "Resource": ["collection/hackathon-hunter"]
              }
            ],
            "AllowFromPublic": true
          }
          ]

  DataAccessPolicy:
    Type: AWS::OpenSearchServerless::AccessPolicy
    Properties:
      Name: hh-data-policy # Policy names have stricter length limits
      Type: data
      Description: 'Allow ScoutAgentRole to read/write user_preferences index'
      Policy: !Sub |
        [
          {
            "Rules": [
              {
                "ResourceType": "index",
                "Resource": [
                  "index/hackathon-hunter/*" 
                ],
                "Permission": [
                  "aoss:CreateIndex",
                  "aoss:DeleteIndex",
                  "aoss:UpdateIndex",
                  "aoss:DescribeIndex",
                  "aoss:ReadDocument",
                  "aoss:WriteDocument"
                ]
              },
              { 
                  "ResourceType": "collection",
                  "Resource": [
                      "collection/hackathon-hunter"
                  ],
                  "Permission": [
                      "aoss:*" 
                  ]
              }
            ],
            "Principal": [
              "${ScoutAgentRole.Arn}"
            ]
          }
        ]

  OpenSearchCollection:
    Type: AWS::OpenSearchServerless::Collection
    Properties:
      Name: hackathon-hunter
      Type: VECTORSEARCH
      Description: Vector storage for user preferences and memories
    DependsOn:
      - EncryptionSecurityPolicy
      - NetworkSecurityPolicy
  # --- 3. IAM ROLES ---
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ECSExecutionRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  ScoutAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-ScoutAgentRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: ScoutAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: 
                  - '*' # Simplified for hackathon
                  - !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:knowledge-base/${KnowledgeBaseId}'
              - Effect: Allow
                Action: ['dynamodb:GetItem', 'dynamodb:PutItem', 'dynamodb:BatchWriteItem', 'dynamodb:Query', 'dynamodb:Scan','dynamodb:UpdateItem']
                Resource:
                  - !GetAtt HackathonsTable.Arn
                  - !GetAtt ScraperFunctionsTable.Arn
                  - !GetAtt UserInterestsTable.Arn
                  - !GetAtt ChatHistoryTable.Arn
              - Effect: Allow
                Action: aoss:APIAccessAll
                Resource: !GetAtt OpenSearchCollection.Arn
              - Effect: Allow
                Action: 'sqs:SendMessage'
                Resource: !GetAtt ScoutResponseQueue.Arn
        

  NudgeAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-NudgeAgentRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: NudgeAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: bedrock:InvokeModel
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-haiku-20240307-v1:0'
              - Effect: Allow
                Action: aoss:APIAccessAll
                Resource: !GetAtt OpenSearchCollection.Arn
              - Effect: Allow
                Action: ['dynamodb:Query', 'dynamodb:Scan']
                Resource:
                  - !GetAtt HackathonsTable.Arn
                  - !GetAtt UserInterestsTable.Arn

  TelegramHandlerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AWS::StackName}-TelegramHandlerRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: TelegramHandlerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: ecs:RunTask
                Resource: !Ref ScoutTaskDefinition
              - Effect: Allow
                Action: iam:PassRole
                Resource:
                  - !GetAtt ScoutAgentRole.Arn
                  - !GetAtt ECSExecutionRole.Arn
                Condition:
                  StringEquals:
                    iam:PassedToService: ecs-tasks.amazonaws.com
              - Effect: Allow
                Action: ['sqs:ReceiveMessage', 'sqs:DeleteMessage', 'sqs:GetQueueAttributes']
                Resource: !GetAtt ScoutResponseQueue.Arn
              - Effect: Allow
                Action: dynamodb:PutItem
                Resource: !GetAtt ProcessedMessagesTable.Arn

  # --- 4. COMPUTE & API ---
  DependenciesLayer:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: !Sub '${AWS::StackName}-dependencies'
      Description: Python dependencies for Lambda functions
      Content:
        S3Bucket: !Ref KnowledgeBaseBucket
        S3Key: lambda-layer.zip
      CompatibleRuntimes:
        - python3.11

  ScoutECRRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hackathon-scout
      ImageScanningConfiguration:
        ScanOnPush: true

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: hackathon-hunter

  ScoutTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: hackathon-scout-agent
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: '1024'
      Memory: '2048'
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ScoutAgentRole.Arn
      ContainerDefinitions:
        - Name: scout-agent
          Image: !Sub '${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${ScoutECRRepository}:latest'
          Essential: true
          Environment:
            - Name: HACKATHONS_TABLE
              Value: !Ref HackathonsTable
            - Name: SCRAPER_FUNCTIONS_TABLE
              Value: !Ref ScraperFunctionsTable
            - Name: USER_INTERESTS_TABLE
              Value: !Ref UserInterestsTable
            - Name: KNOWLEDGE_BASE_ID
              Value: !Ref KnowledgeBaseId
            - Name: RESPONSE_QUEUE_URL
              Value: !Ref ScoutResponseQueue
            - Name: OPENSEARCH_ENDPOINT
              Value: !GetAtt OpenSearchCollection.CollectionEndpoint
            - Name: MEM0_LLM_PROVIDER
              Value: aws_bedrock
            - Name: MEM0_LLM_MODEL
              Value: amazon.titan-text-express-v1
            - Name: MEM0_LLM_TEMPERATURE
              Value: 0.2
            - Name: MEM0_LLM_MAX_TOKENS
              Value: 2000
            - Name: MEM0_EMBEDDER_PROVIDER
              Value: aws_bedrock
            - Name: MEM0_EMBEDDER_MODEL
              Value: amazon.titan-embed-text-v2:0
            - Name: "CHAT_HISTORY_TABLE"
              Value: !Ref ChatHistoryTable
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ScoutLogGroup
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ScoutECSService:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Sub '${AWS::StackName}-scout-service'
      Cluster: !Ref ECSCluster
      TaskDefinition: !Ref ScoutTaskDefinition
      LaunchType: FARGATE
      DesiredCount: 0
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets: [!Ref PublicSubnetA, !Ref PublicSubnetB]
          SecurityGroups: [!Ref ScoutAgentSecurityGroup]
          AssignPublicIp: ENABLED

  ScoutLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/hackathon-scout
      RetentionInDays: 7

  NudgeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-NudgeAgent'
      Runtime: python3.11
      Handler: nudge_agent.lambda_handler
      Role: !GetAtt NudgeAgentRole.Arn
      Code:
        # Code is deployed via deploy.py
        ZipFile: |
          def lambda_handler(event, context): return {'statusCode': 200, 'body': 'OK'}
      Timeout: 60
      Layers:
        - !Ref DependenciesLayer

  TelegramHandlerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AWS::StackName}-TelegramHandler'
      Runtime: python3.11
      Handler: telegram_handler.lambda_handler
      Role: !GetAtt TelegramHandlerRole.Arn
      Layers:
        - !Ref DependenciesLayer
      Environment:
        Variables:
          SCOUT_TASK_DEFINITION_ARN: !Ref ScoutTaskDefinition
          ECS_CLUSTER_NAME: !Ref ECSCluster
          SUBNET_A: !Ref PublicSubnetA
          SUBNET_B: !Ref PublicSubnetB
          SECURITY_GROUP_ID: !Ref ScoutAgentSecurityGroup
          TELEGRAM_BOT_TOKEN: '{{resolve:ssm:telegrambottoken}}'
          HACKATHONS_TABLE: !Ref HackathonsTable
          SCRAPER_FUNCTIONS_TABLE: !Ref ScraperFunctionsTable
          USER_INTERESTS_TABLE: !Ref UserInterestsTable
          KNOWLEDGE_BASE_ID: !Ref KnowledgeBaseId
          RESPONSE_QUEUE_URL: !Ref ScoutResponseQueue
          PROCESSED_MESSAGES_TABLE: !Ref ProcessedMessagesTable
      Code:
        # Code is deployed via deploy.py
        ZipFile: |
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'OK'}
  
  SQSEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 1
      Enabled: true
      EventSourceArn: !GetAtt ScoutResponseQueue.Arn
      FunctionName: !GetAtt TelegramHandlerFunction.Arn

  WeeklyNotificationRule:
    Type: AWS::Events::Rule
    Properties:
      Name: weekly-hackathon-notifications
      ScheduleExpression: 'cron(0 20 ? * SUN *)'
      State: ENABLED
      Targets:
        - Arn: !GetAtt NudgeLambdaFunction.Arn
          Id: NudgeAgentTarget

  LambdaInvokePermissionNudge:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref NudgeLambdaFunction
      Principal: events.amazonaws.com
      SourceArn: !GetAtt WeeklyNotificationRule.Arn

  TelegramAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: hackathon-telegram-webhook
      Description: Webhook endpoint for Telegram bot

  WebhookResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref TelegramAPI
      ParentId: !GetAtt TelegramAPI.RootResourceId
      PathPart: webhook

  WebhookMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref TelegramAPI
      ResourceId: !Ref WebhookResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${TelegramHandlerFunction.Arn}/invocations'

  APIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: WebhookMethod
    Properties:
      RestApiId: !Ref TelegramAPI
      StageName: prod

  APIGatewayInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref TelegramHandlerFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${TelegramAPI}/prod/POST/webhook'

Outputs:
  VPCId:
    Description: The ID of the VPC
    Value: !Ref VPC
  ScoutAgentSecurityGroupId:
    Description: The ID of the Security Group for the Scout Agent
    Value: !Ref ScoutAgentSecurityGroup
  PublicSubnetIds:
    Description: The IDs of the public subnets
    Value: !Join [",", [!Ref PublicSubnetA, !Ref PublicSubnetB]]
  ECSClusterName:
    Description: ECS cluster name
    Value: !Ref ECSCluster
  TelegramWebhookURL:
    Description: Telegram webhook URL to configure your bot
    Value: !Sub 'https://${TelegramAPI}.execute-api.${AWS::Region}.amazonaws.com/prod/webhook'
  ECRRepositoryURI:
    Description: ECR repository URI for Scout agent
    Value: !GetAtt ScoutECRRepository.RepositoryUri
  S3BucketName:
    Description: S3 bucket for Knowledge Base documents
    Value: !Ref KnowledgeBaseBucket
  NudgeLambdaFunctionName:
    Description: The name of the Nudge Agent Lambda function
    Value: !Ref NudgeLambdaFunction
  TelegramHandlerFunctionName:
    Description: The name of the Telegram Handler Lambda function
    Value: !Ref TelegramHandlerFunction
  ScoutResponseQueueUrl:
    Description: The URL of the SQS queue for Scout agent responses
    Value: !Ref ScoutResponseQueue

  ChatHistoryTableName:
    Description: "The name of the DynamoDB table for chat history"
    Value: !Ref ChatHistoryTable
    Export:
      Name: !Sub "${AWS::StackName}-ChatHistoryTableName"

  ChatHistoryTableArn:
    Description: "The ARN of the DynamoDB table for chat history"
    Value: !GetAtt ChatHistoryTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ChatHistoryTableArn"
